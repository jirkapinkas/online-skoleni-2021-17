version: '3.8'
services:
  crm:
    build:
      context: ./
      dockerfile: ./micro-crm/Dockerfile
    networks:
      - elastic
    ports:
      - "8081:8080"
  products:
    build:
      context: ./
      dockerfile: ./micro-products/Dockerfile
    networks:
      - elastic
    ports:
      - "8082:8080"
  mailing:
    build:
      context: ./
      dockerfile: ./micro-mailing/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - elastic
  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.14.0"
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        hard: -1
        soft: -1
    environment:
      - bootstrap.memory_lock=true
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    # environment:
    #   discovery.type: single-node
    healthcheck:
      interval: 20s
      retries: 100
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'
    networks:
      - elastic
    volumes:
      - esdata:/usr/share/elasticsearch/data
  apm:
    image: "docker.elastic.co/apm/apm-server:7.14.0"
#    command: --strict.perms=false -e
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
#    user: apm-server
#    environment: 
#      output.elasticsearch.hosts: elasticsearch:9200
    ports:
      - "8200:8200"
    healthcheck:
      interval: 10s
      retries: 100
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/
    networks:
      - elastic
  kibana:
    image: "docker.elastic.co/kibana/kibana:7.14.0"
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    healthcheck:
      interval: 10s
      retries: 100
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status
    networks:
      - elastic
volumes:
  esdata:
    driver: local

networks:
  elastic:
    driver: bridge
